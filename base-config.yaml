# Create a GitHub OAuth app at https://github.com/settings/developers
client_id: 468af815560fb4587287
client_secret: 02146f4074f8564ed17b7a6b7a1b95271537875a

# Random string for signing webhook secrets.
# If set to "generate", one will be generated for you.
webhook_key: generate

# Message type for webhook messages.
msgtype: m.notice

# Templates are Jinja2 templates that get all the event fields as arguments,
# like message templates do. You can insert them into messages and other
# templates as if they were arguments.
templates:
  repo_prefix: >
    <strong>[{{ repo_link(repository) }}]</strong>
  repo_sender_prefix: >
    {{ templates.repo_prefix }} {{ user_link(sender) }}
  issue_link: >
    <a href="{{ issue.html_url }}">issue #{{ issue.number }}</a>: {{ issue.title|e }}

# Macros is a single Jinja2 template that is prepended to all other templates.
# It is useful for having macro functions that are usable anywhere.
macros: >
  {%- macro fancy_label(label) -%}
    <font
      {% set fg_color = util.contrast_fg(label.color) %}
      data-mx-fg-color="#{{ fg_color }}" color="#{{ fg_color }}"
      data-mx-bg-color="#{{ label.color }}"
      title="{{ label.description }}"
    >&nbsp;{{ label.name }}&nbsp;</font>
  {%- endmacro -%}

  {%- macro user_link(user) -%}
    <a href="{{ user.html_url }}">{{ (user.name or user.login)|e }}</a>
  {%- endmacro -%}

  {%- macro milestone_link(milestone) -%}
    milestone <a href="{{ milestone.html_url }}">{{ milestone.title|e }}</a>
  {%- endmacro -%}

  {%- macro repo_link(repo) -%}
    <a href="{{ repo.html_url }}">{{ repo.full_name|e }}</a>
  {%- endmacro -%}


# Messages are the actual message templates. Each template here corresponds to
# a specific event received through a GitHub webhook.
messages:
  # Ping events are sent when the webhook is created and when it's manually pinged.
  # Ping events are always logged, but not sent to the Matrix room by default.
  ping: null

  # This event could be used for branch/tag creations, but this example config
  # just uses the push event for those too.
  create: null

  # Star events happen when someone stars or unstars the repo.
  # The watch event also happens when someone stars the repo, not sure if that would be better.
  star: >
    {{ templates.repo_sender_prefix }} {% if action == StarAction.DELETED %}un{% endif %}starred the repo

  fork: >
    {{ templates.repo_prefix }} Repo forked into {{ repo_link(forkee) }}

  # All events that change an issue itself (i.e. everything except comments)
  issues: >
    {{ templates.repo_sender_prefix }}
    {% if action == IssueAction.OPENED %}
      opened {{ templates.issue_link }}<br/>
      {% if issue.body %}
        <blockquote>{{ util.markdown(issue.body) }}</blockquote>
      {% endif %}
      {% for label in issue.labels %}
        {{ fancy_label(label) }}
      {% endfor %}
    {% elif action == IssueAction.LABELED %}      added {{ fancy_label(label) }} to
    {% elif action == IssueAction.UNLABELED %}    removed {{ fancy_label(label) }} from
    {% elif action == IssueAction.MILESTONED %}   added {{ templates.issue_link }} to {{ milestone_link(milestone) }}
    {% elif action == IssueAction.DEMILESTONED %} removed {{ templates.issue_link }} from {{ milestone_link(milestone) }}
    {% elif action == IssueAction.ASSIGNED %}     assigned {{ user_link(assignee) }} to
    {% elif action == IssueAction.UNASSIGNED %}   unassigned {{ user_link(assignee) }} from
    {% else %}                                    {{ action }}
    {% endif %}
    {% if action not in (IssueAction.OPENED, IssueAction.MILESTONED, IssueAction.DEMILESTONED) %}
      {{ templates.issue_link }}
    {% endif %}

  issue_comment: >
    {{ templates.repo_sender_prefix }}
    {% if action == CommentAction.CREATED %}
      <a href="{{ comment.html_url }}">commented</a> on {{ templates.issue_link }}:
      <blockquote>{{ util.markdown(comment.body) }}</blockquote>
    {% else %}
      {{ action }}
      {% if comment.user.id == sender.id %}
        their
      {% else %}
        {{ user_link(comment.user) }}'s
      {% endif %}
      <a href="{{ comment.html_url }}">comment</a> on {{ templates.issue_link }}
    {% endif %}

  push: >
    {{ templates.repo_sender_prefix }}
    {% if forced %}force{% endif %}
    {% if deleted %}deleted {{ util.ref_type(ref) }}
    {% else %}pushed to
    {% endif %}
    {{ util.ref_name(ref) }}
    {%- if created %} (new {{ util.ref_type(ref) }}){% endif -%}
    {%- if commits|length > 0 %}:{% endif -%}
    <ul>
    {% for commit in commits %}
      <li>
        <code><a href="{{ commit.url }}">{{ commit.id[:8] }}</a></code>
        {{ util.cut_message(commit.message) }}
        {% if commit.author.username != sender.login %}
          by {{ user_link(commit.author) }}
        {% endif %}
      </li>
    {% endfor %}
    </ul>

  release: >
    {% if action != ReleaseAction.PUBLISHED %} {% do abort() %} {% endif %}

    {{ templates.repo_sender_prefix }} published
    <a href="{{ release.html_url }}">{{ release.tag_name }}: {{ release.name }}</a>

  # Meta events are sent when the webhook itself is deleted.
  meta: >
    {% if action != MetaAction.DELETED %} {% do abort() %} {% endif %}

    {{ templates.repo_prefix }} Webhook deleted by {{ user_link(sender) }}

  # Repo publication event.
  public: >
    {{ templates.repo_sender_prefix }} made the repo public

  # Wiki page events.
  gollum: >
    {% if pages|length == 0 %}
      {% do abort() %}
    {% endif %}

    {% macro page_link(page) %}
      <a href="{{ page.html_url }}">{{ page.title }}</a>
    {% endmacro %}

    {% set created, edited = [], [] %}
    {% for page in pages %}
      {% if page.action == WikiPageAction.CREATED %}
        {% do created.append(page_link(page)) %}
      {% elif page.action == WikiPageAction.EDITED %}
        {% do edited.append(page_link(page)) %}
      {% endif %}
    {% endfor %}

    {{ templates.repo_sender_prefix }}
    {% if created %}
      created {{ util.join_human_list(created) }}
    {% endif %}
    {% if edited %}
      {% if created %}
        and
      {% endif %}
      edited {{ util.join_human_list(edited) }}
    {% endif %}
    on the wiki
